swagger: '2.0'
info:
  version: v1
  title: DukeEnergyapi
  description: This is sample API being generated by cedrus-api generator
  x-ibm-name: ''
host: $(catalog.host)
basePath: /api
schemes:
  - https
produces:
  - application/json
paths:
  /schedules/v1:
    get:
      tags:
        - Schedule
      description: Gets all schedules from the system that the user has access to
      operationId: getSchedule
      produces:
        - application/json
      x-swagger-router-controller: Schedule
      responses:
        '200':
          description: schedule response
          schema:
            type: array
            items:
              $ref: '#/definitions/schedulesv1'
        '404':
          description: schedule response
          schema:
            type: object
        '500':
          description: schedule response
          schema:
            type: object
      parameters:
        - name: pageSize
          in: query
          description: Number of records returned
          type: integer
        - name: pageNumber
          in: query
          description: Page number
          type: integer
    post:
      tags:
        - Schedule
      description: Posts all schedules from the system that the user has access to
      operationId: postSchedule
      produces:
        - application/json
      consumes:
        - application/json
      x-swagger-router-controller: Schedule
      responses:
        '204':
          description: schedule response
          schema:
            type: array
            items:
              $ref: '#/definitions/schedulesv1'
        '404':
          description: schedule response
          schema:
            type: object
        '500':
          description: schedule response
          schema:
            type: object
      parameters:
        - name: schedules/v1
          in: body
          schema:
            $ref: '#/definitions/schedulesv1'
  /orders/v1:
    get:
      tags:
        - Order
      description: Gets all orders from the system that the user has access to
      operationId: getOrder
      produces:
        - application/json
      x-swagger-router-controller: Order
      responses:
        '200':
          description: order response
          schema:
            type: array
            items:
              $ref: '#/definitions/ordersv1'
        '404':
          description: order response
          schema:
            type: object
        '500':
          description: order response
          schema:
            type: object
      parameters:
        - name: pageSize
          in: query
          description: Number of records returned
          type: integer
        - name: pageNumber
          in: query
          description: Page number
          type: integer
    put:
      tags:
        - Order
      description: Puts all orders from the system that the user has access to
      operationId: putOrder
      produces:
        - application/json
      consumes:
        - application/json
      x-swagger-router-controller: Order
      responses:
        '204':
          description: order response
          schema:
            type: array
            items:
              $ref: '#/definitions/ordersv1'
        '404':
          description: order response
          schema:
            type: object
        '500':
          description: order response
          schema:
            type: object
      parameters:
        - name: orders/v1
          in: body
          schema:
            $ref: '#/definitions/ordersv1'
    post:
      tags:
        - Order
      description: Posts all orders from the system that the user has access to
      operationId: postOrder
      produces:
        - application/json
      consumes:
        - application/json
      x-swagger-router-controller: Order
      responses:
        '204':
          description: order response
          schema:
            type: array
            items:
              $ref: '#/definitions/ordersv1'
        '404':
          description: order response
          schema:
            type: object
        '500':
          description: order response
          schema:
            type: object
      parameters:
        - name: orders/v1
          in: body
          schema:
            $ref: '#/definitions/ordersv1'
    patch:
      tags:
        - Order
      description: Patchs all orders from the system that the user has access to
      operationId: patchOrder
      produces:
        - application/json
      consumes:
        - application/json
      x-swagger-router-controller: Order
      responses:
        '204':
          description: order response
          schema:
            type: array
            items:
              $ref: '#/definitions/ordersv1'
        '404':
          description: order response
          schema:
            type: object
        '500':
          description: order response
          schema:
            type: object
    delete:
      tags:
        - Order
      description: Deletes all orders from the system that the user has access to
      operationId: deleteOrder
      produces:
        - application/json
      consumes:
        - application/json
      x-swagger-router-controller: Order
      responses:
        '204':
          description: order response
          schema:
            type: array
            items:
              $ref: '#/definitions/ordersv1'
        '404':
          description: order response
          schema:
            type: object
        '500':
          description: order response
          schema:
            type: object
      parameters:
        - name: orders/v1
          in: body
          schema:
            $ref: '#/definitions/ordersv1'
definitions:
  ApiError:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  schedulesv1:
    type: object
    properties:
      name:
        type: string
      active:
        type: boolean
      type:
        type: string
      id:
        type: string
      gatewaySerialNumber:
        type: string
      conditions:
        type: array
        items:
          type: object
          properties:
            weekdays:
              type: array
              items:
                type: string
            startDate:
              type: string
            endDate:
              type: string
            startTime:
              type: string
            endTime:
              type: string
          required:
            - weekdays
            - startDate
            - endDate
            - startTime
            - endTime
      devices:
        type: array
        items:
          type: object
          properties:
            deviceId:
              type: string
            type:
              type: string
            commands:
              type: array
              items:
                type: object
                properties:
                  body:
                    type: object
                    properties:
                      scale:
                        type: string
                      temperature:
                        type: number
                    required:
                      - scale
                      - temperature
                  command:
                    type: string
                  id:
                    type: string
                required:
                  - body
                  - command
                  - id
          required:
            - deviceId
            - type
            - commands
    required:
      - name
      - active
      - type
      - id
      - gatewaySerialNumber
      - conditions
      - devices
  ordersv1:
    type: object
    properties:
      order_id:
        type: string
      order_name:
        type: string
      item:
        type: array
        items:
          type: string
    required:
      - order_id
      - order_name
      - item
responses:
  Standard500ErrorResponse:
    description: An unexpected error occured.
    schema:
      $ref: '#/definitions/ApiError'
  PersonDoesNotExistResponse:
    description: Person does not exist.
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  gateway: datapower-gateway
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:8080'
  assembly:
    execute:
      - invoke:
          target-url: 'https://.mybluemix.net$(request.path)$(request.search)'
          tls-profile: ''
          secure-gateway: false
    catch: []
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
security:
  - Bearer: []
